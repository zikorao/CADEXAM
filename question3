import * as cdk from 'aws-cdk-lib';
import * as ec2 from 'aws-cdk-lib/aws-ec2';
import * as sqs from 'aws-cdk-lib/aws-sqs';
import * as sns from 'aws-cdk-lib/aws-sns';
import * as secretsmanager from 'aws-cdk-lib/aws-secretsmanager';
import * as iam from 'aws-cdk-lib/aws-iam';

const { App, Stack, Duration } = cdk;

class MyCdkStack extends Stack {
  constructor(scope: cdk.Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    // Create a VPC with CIDR 10.30.0.0/16
    const vpc = new ec2.Vpc(this, 'MyVpc', {
      cidr: '10.30.0.0/16',
      maxAzs: 2, // Adjust as needed
    });

    // Create a public subnet for the EC2 instance
    const publicSubnet = vpc.publicSubnets[0];

    // Create an EC2 instance in the public subnet
    const ec2Instance = new ec2.Instance(this, 'MyEC2Instance', {
      instanceType: ec2.InstanceType.of(ec2.InstanceClass.T2, ec2.InstanceSize.MICRO),
      machineImage: ec2.MachineImage.latestAmazonLinux({
        generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2,
      }),
      vpc,
      vpcSubnets: { subnetType: ec2.SubnetType.PUBLIC },
    });

    // Create an SQS Queue
    const sqsQueue = new sqs.Queue(this, 'MySqsQueue', {
      visibilityTimeout: Duration.seconds(300), // Adjust as needed
    });

    // Create an SNS Topic
    const snsTopic = new sns.Topic(this, 'MySnsTopic');

    // Create AWS Secrets Manager Secret
    const secret = new secretsmanager.Secret(this, 'MySecret', {
      secretName: 'metrodb-secrets',
      generateSecretString: {
        secretStringTemplate: JSON.stringify({
          username: 'your-username',
          password: 'your-password',
        }),
        generateStringKey: 'password',
        excludePunctuation: true,
        passwordLength: 16,
      },
    });

    // Grant permissions to the EC2 instance to access the secrets
    secret.grantRead(ec2Instance);

    // Output the public IP address of the EC2 instance
    new cdk.CfnOutput(this, 'EC2PublicIP', {
      value: ec2Instance.instancePublicIp,
      description: 'Public IP Address of the EC2 instance',
    });
  }
}

const app = new App();
new MyCdkStack(app, 'MyCdkStack');
